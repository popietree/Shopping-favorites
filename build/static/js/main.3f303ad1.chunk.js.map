{"version":3,"sources":["hooks-store/store.js","hooks-store/products-store.js","components/Nav/Navigation.js","components/UI/Card.js","components/Products/ProductItem.js","containers/Products.js","context/products-context.js","components/Favorites/FavoriteItem.js","containers/Favorites.js","App.js","index.js"],"names":["globalState","listeners","actions","useStore","shouldListen","arguments","length","undefined","setState","useState","useEffect","push","filter","li","actionIdentifier","payload","newState","Object","objectSpread2","_step","_iterator","createForOfIteratorHelper","s","n","done","listener","value","err","e","f","configureStore","userActions","initialState","TOGGLE_FAV","curState","productId","prodIndex","products","findIndex","p","id","newFavStatus","isFavorite","updatedProducts","toConsumableArray","title","description","Navigation","props","react_default","a","createElement","className","react_router_dom","to","exact","Card","style","children","ProductItem","React","memo","console","log","dispatch","components_UI_Card","marginBottom","isFav","onClick","Products","createContext","toggleFav","state","map","prod","Products_ProductItem","key","FavoriteItem","Favorites","favoriteProducts","content","components_Favorites_FavoriteItem","App","Fragment","components_Nav_Navigation","react_router","path","component","ProductsPage","FavoritesPage","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.3f303ad1.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { useEffect } from \"react/cjs/react.development\";\nlet globalState = {}; //gobla state outside of fucntions avaialible to all coponents\nlet listeners = []; //array of functions that change when state changes\nlet actions = {};\n\n//STORE SETUP\nexport const useStore = (shouldListen = true) => {\n  // store changes\n  const setState = useState(globalState)[1]; //dont put in dependancy if destructure\n  //can forward payload to action function\n  const dispatch = (actionIdentifier, payload) => {\n    const newState = actions[actionIdentifier](globalState, payload); // get the right action with action identifier then CALL it by passsing global state\n    globalState = { ...globalState, ...newState }; // merge the new state with old\n    for (const listener of listeners) {\n      //go through every listener function and update with th enew state\n      listener(globalState);\n    }\n  };\n\n  //when unmount remove listener\n  //   useEffect(() => {\n  //     // only listen if pass shouldListen, that way when only useStore for dispatch dont rerender the comp\n  //     if (shouldListen) listeners.push(setState); //listen to all functions that need state change\n  //     return () => {\n  //       if (shouldListen) listeners = listeners.filter((li) => li !== setState);\n  //     };\n  //   }, [setState, shouldListen]);\n  //   return [globalState, dispatch];\n  // };\n\n  useEffect(() => {\n    if (shouldListen) {\n      listeners.push(setState);\n    }\n\n    return () => {\n      if (shouldListen) {\n        listeners = listeners.filter((li) => li !== setState);\n      }\n    };\n  }, [setState, shouldListen]);\n\n  return [globalState, dispatch];\n};\n\n//set and change actions when have your own state\nexport const initStore = (userActions, initialState) => {\n  if (initialState) {\n    //if initialState not null, merge the custom state to initial state\n    globalState = { ...globalState, ...initialState };\n    actions = { ...actions, ...userActions };\n  }\n};\n\n//when useStore, component get access to global state and can listen to its changes\n//Add dispatch actions\n","import { initStore } from \"./store\";\n\nconst configureStore = () => {\n  const actions = {\n    TOGGLE_FAV: (curState, productId) => {\n      const prodIndex = curState.products.findIndex((p) => p.id === productId);\n      const newFavStatus = !curState.products[prodIndex].isFavorite;\n      const updatedProducts = [...curState.products];\n      updatedProducts[prodIndex] = {\n        ...curState.products[prodIndex],\n        isFavorite: newFavStatus,\n      };\n      return { products: updatedProducts };\n    },\n  };\n  initStore(actions, {\n    products: [\n      {\n        id: \"p1\",\n        title: \"Red Scarf\",\n        description: \"A pretty red scarf.\",\n        isFavorite: false,\n      },\n      {\n        id: \"p2\",\n        title: \"Blue T-Shirt\",\n        description: \"A pretty blue t-shirt.\",\n        isFavorite: false,\n      },\n      {\n        id: \"p3\",\n        title: \"Green Trousers\",\n        description: \"A pair of lightly green trousers.\",\n        isFavorite: false,\n      },\n      {\n        id: \"p4\",\n        title: \"Orange Hat\",\n        description: \"Street style! An orange hat.\",\n        isFavorite: false,\n      },\n    ],\n  });\n};\n\nexport default configureStore;\n//Initiate initial products sotre\n// const configureStore = () => {\n//   const actions = {\n//     // Product Id is payload\n//     TOGGLE_FAV: (currState, productId) => {\n//       const prodIndex = currState.findIndex((p) => p.id === productId);\n//       //GET NEW FAVORITE STATUS\n//       const newFavStatus = !currState[prodIndex].isFavorite;\n//       //CRATE UPDATED PRODUCTS LIST\n//       const updatedProducts = [...currState];\n//       //REPLACE FAVORITE STATUS\n//       updatedProducts[prodIndex] = {\n//         ...currState[prodIndex],\n//         isFavorite: newFavStatus,\n//       };\n//       return { products: updatedProducts };\n//     },\n//   };\n//   //Actions object will be registed in global action sobj\n//   initStore(actions, {\n//     products: [\n//       {\n//         id: \"p1\",\n//         title: \"Red Scarf\",\n//         description: \"A pretty red scarf.\",\n//         isFavorite: false,\n//       },\n//       {\n//         id: \"p2\",\n//         title: \"Blue T-Shirt\",\n//         description: \"A pretty blue t-shirt.\",\n//         isFavorite: false,\n//       },\n//       {\n//         id: \"p3\",\n//         title: \"Green Trousers\",\n//         description: \"A pair of lightly green trousers.\",\n//         isFavorite: false,\n//       },\n//       {\n//         id: \"p4\",\n//         title: \"Orange Hat\",\n//         description: \"Street style! An orange hat.\",\n//         isFavorite: false,\n//       },\n//     ],\n//   });\n// };\n\n// export default configureStore;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './Navigation.css';\n\nconst Navigation = props => {\n  return (\n    <header className=\"main-header\">\n      <nav>\n        <ul>\n          <li>\n            <NavLink to=\"/\" exact>All Products</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/favorites\">Favorites</NavLink>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return <div className=\"card\" style={props.style}>{props.children}</div>;\n};\n\nexport default Card;\n","import React, { useContext } from \"react\";\nimport { useStore } from \"../../hooks-store/store\";\n\n// import { ProductsContext } from \"../../context/products-context\";\n// import { useDispatch } from 'react-redux';\n\nimport Card from \"../UI/Card\";\nimport \"./ProductItem.css\";\n// import { toggleFav } from \"../../store/actions/products\";\n// import productsContext from \"../../context/products-context\";\n\nconst ProductItem = React.memo((props) => {\n  console.log(\"rendering\");\n  // const dispatch = useDispatch();\n  // const { toggleFav } = useContext(ProductsContext);\n  const dispatch = useStore(false)[1];\n\n  const toggleFavHandler = () => {\n    // toggleFav(props.id);\n    //find dispatch action TOGGLE_FAVE with was initialied in intiStore(actions, produsct\n    //it MERGED to global actions\n    //arguemtns are the ACTIO IDENTIFIER and the PAYLOAD productId\n    dispatch(\"TOGGLE_FAV\", props.id);\n  };\n\n  return (\n    <Card style={{ marginBottom: \"1rem\" }}>\n      <div className=\"product-item\">\n        <h2 className={props.isFav ? \"is-fav\" : \"\"}>{props.title}</h2>\n        <p>{props.description}</p>\n        <button\n          className={!props.isFav ? \"button-outline\" : \"\"}\n          onClick={toggleFavHandler}\n        >\n          {props.isFav ? \"Un-Favorite\" : \"Favorite\"}\n        </button>\n      </div>\n    </Card>\n  );\n});\n\nexport default ProductItem;\n","import React, { useContext } from \"react\";\n\nimport ProductItem from \"../components/Products/ProductItem\";\nimport { ProductsContext } from \"../context/products-context\";\nimport \"./Products.css\";\nimport { useStore } from \"../hooks-store/store\";\n\nconst Products = (props) => {\n  const state = useStore()[0];\n  return (\n    <ul className=\"products-list\">\n      {state.products.map((prod) => (\n        <ProductItem\n          key={prod.id}\n          id={prod.id}\n          title={prod.title}\n          description={prod.description}\n          isFav={prod.isFavorite}\n        />\n      ))}\n    </ul>\n  );\n};\n\n// const Products = (props) => {\n//   //Only need State\n//   // const [state, dispatch] = useStore();\n//   const state = useStore()[0];\n//   // const productList = useContext(ProductsContext).products;\n//   return (\n//     <ul className=\"products-list\">\n//       {state.products.map((prod) => (\n//         <ProductItem\n//           key={prod.id}\n//           id={prod.id}\n//           title={prod.title}\n//           description={prod.description}\n//           isFav={prod.isFavorite}\n//         />\n//       ))}\n//     </ul>\n//   );\n// };\n\nexport default Products;\n\n//IMPORT your Product context to use context\n//MAKE your Context Ctx Varaible\n","import React, { useState } from \"react\";\n\nexport const ProductsContext = React.createContext({\n  products: [],\n  toggleFav: (id) => {},\n});\n\nexport default (props) => {\n  const [productsList, setProductsList] = useState([\n    {\n      id: \"p1\",\n      title: \"Red Scarf\",\n      description: \"A pretty red scarf.\",\n      isFavorite: false,\n    },\n    {\n      id: \"p2\",\n      title: \"Blue T-Shirt\",\n      description: \"A pretty blue t-shirt.\",\n      isFavorite: false,\n    },\n    {\n      id: \"p3\",\n      title: \"Green Trousers\",\n      description: \"A pair of lightly green trousers.\",\n      isFavorite: false,\n    },\n    {\n      id: \"p4\",\n      title: \"Orange Hat\",\n      description: \"Street style! An orange hat.\",\n      isFavorite: false,\n    },\n  ]);\n\n  const toggleFavorite = (productId) => {\n    setProductsList((currentProdList) => {\n      //this.state.product === currentProdList & prodIndex = productId\n      //GET PRODUCT INDEX\n      const prodIndex = currentProdList.findIndex((p) => p.id === productId);\n      //GET NEW FAVORITE STATUS\n      const newFavStatus = !currentProdList[prodIndex].isFavorite;\n      //CRATE UPDATED PRODUCTS LIST\n      const updatedProducts = [...currentProdList];\n      //REPLACE FAVORITE STATUS\n      updatedProducts[prodIndex] = {\n        ...currentProdList[prodIndex],\n        isFavorite: newFavStatus,\n      };\n      return updatedProducts;\n    });\n  };\n  //ADD THE TOGGLE TO VALUE\n  return (\n    <ProductsContext.Provider\n      value={{ products: productsList, toggleFav: toggleFavorite }}\n    >\n      {props.children}\n    </ProductsContext.Provider>\n  );\n};\n//Create the provider by passing value from the ProductContext and defined state vairable\n//set VALUE with USE STATE and out in VALUE Prop\n","import React from 'react';\n\nimport Card from '../UI/Card';\nimport './FavoriteItem.css';\n\nconst FavoriteItem = props => {\n  return (\n    <Card style={{ marginBottom: '1rem' }}>\n      <div className=\"favorite-item\">\n        <h2>{props.title}</h2>\n        <p>{props.description}</p>\n      </div>\n    </Card>\n  );\n};\n\nexport default FavoriteItem;\n","import React, { useContext } from \"react\";\n\nimport FavoriteItem from \"../components/Favorites/FavoriteItem\";\nimport { useStore } from \"../hooks-store/store\";\nimport \"./Products.css\";\n\nconst Favorites = (props) => {\n  const state = useStore()[0];\n  const favoriteProducts = state.products.filter((p) => p.isFavorite);\n  let content = <p className=\"placeholder\">Got no favorites yet!</p>;\n  if (favoriteProducts.length > 0) {\n    content = (\n      <ul className=\"products-list\">\n        {favoriteProducts.map((prod) => (\n          <FavoriteItem\n            key={prod.id}\n            id={prod.id}\n            title={prod.title}\n            description={prod.description}\n          />\n        ))}\n      </ul>\n    );\n  }\n  return content;\n};\n\nexport default Favorites;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Navigation from './components/Nav/Navigation';\nimport ProductsPage from './containers/Products';\nimport FavoritesPage from './containers/Favorites';\n\nconst App = props => {\n  return (\n    <React.Fragment>\n      <Navigation />\n      <main>\n        <Route path=\"/\" component={ProductsPage} exact />\n        <Route path=\"/favorites\" component={FavoritesPage} />\n      </main>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport configureStore from \"./hooks-store/products-store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport ProductsProvider from \"./context/products-context\";\n\n//Use store\nconfigureStore();\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}